<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2009 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/classes/GalleryRenderer.class');

/**
 * A renderer for Ogg Video (Theora) and Audio (Vorbis).
 * @package OggPlay
 * @subpackage Classes
 * @author Marco Nelles <ogg@maniatek.de>
 * @version $Revision: 1 $
 */
class OggPlayRenderer extends GalleryRenderer {
    /**
     * @see GalleryRenderer::canBeViewedInline
     */
    function canBeViewedInline($item) {
	return GalleryUtilities::isA($item, 'GalleryDataItem')
	    && ($item->getMimeType() == 'audio/ogg' || $item->getMimeType() == 'video/ogg');
    }

    /**
     * @see GalleryRenderer::render
     */
    function render($format, $entity, $item, $params) {

	global $gallery;
	$fallback = trim(preg_replace("/[\r\n]/", '', $params['fallback']));

	if ($format != 'HTML' || ($entity->getMimeType() != 'audio/ogg' && $entity->getMimeType() != 'video/ogg')) {
	    return null;
	}

	$urlGenerator =& $gallery->getUrlGenerator();
	$src = $urlGenerator->generateUrl(
		array('view' => 'core.DownloadItem', 'itemId' => $entity->getId(),
		      'serialNumber' => $entity->getSerialNumber()),
		array('forceFullUrl' => true, 'forceSessionId' => true, 'htmlEntities' => false));

	$itemId = $item->getId();
	list ($ret, $thumbnail) = GalleryCoreApi::fetchThumbnailsByItemIds(array($itemId));
	if (!$ret && !empty($thumbnail)) {
	    $thumbUrl = $urlGenerator->generateUrl(
		array('view' => 'core.DownloadItem', 'itemId' => $thumbnail[$itemId]->getId(),
		      'serialNumber' => $thumbnail[$itemId]->getSerialNumber()),
		array('forceFullUrl' => true, 'forceSessionId' => true, 'htmlEntities' => false));
	}

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'oggplay');
	if ($ret) {
	    return null;
	}

	switch ($entity->getMimeType()) {

	case 'audio/ogg' :
	   return sprintf('<div id="soContent">%s</div><audio controls="true" autoplay="true">
	     <source src="%s" type="audio/ogg" />
	     %s
	     </audio></div>',
	   !empty($params['id']) ? $params['id'] : 'audio',
	   $src, $fallback);

	case 'video/ogg' :
	   return sprintf('<div id="soContent">%s</div><video controls="true" autoplay="true">
	     <source src="%s" type="video/ogg" />
	     %s
	     </video></div>',
	   !empty($params['id']) ? $params['id'] : 'video',
	   $src, $fallback);

	}

    }

}
?>
